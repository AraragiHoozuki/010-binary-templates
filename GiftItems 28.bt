//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File:
//   Authors:
//   Version:
//   Purpose: 
//   History: 
//------------------------------------------------
#include "3H_Enums.bt"

enum<ubyte> ItemTypes
{
    Gift,
    Lost_Item,
};

enum<ubyte> Stars
{
    _1_Star,
    _2_Star,
    _3_Star,
    _4_Star,
    _5_star,
};

enum<ubyte> FalseTrue
{
    False_,
    True_,
};

LittleEndian();
local int i<hidden=true>;

struct FILE {
    struct HEADER {
        uint Header;
        uint PointertoTable1;
        uint SizeofTable1;
        uint PointertoTable2;
        uint SizeofTable2;
    }Header<fgcolor=cLtBlue>;
    
    FSeek(Header.PointertoTable1);
    struct TABLE1 {
            uint Header<bgcolor=cRed>;
            uint Table1Num<bgcolor=cRed>;
            uint Table1Size<bgcolor=cRed>;
            ubyte Padding[0x34]<bgcolor=cBlue>;
        struct TABLE1DATA {
            for( i = 0; i < Table1Num; i++ )
            {
                struct ITEMDATA {
                    local GiftID NameofItems<hidden=true>;
                    NameofItems = i;
                    int Price;
                    Stars Starlevel;
                    FalseTrue IsQuestItem;
                    FalseTrue IsFlower;
                    FalseTrue EveryLoves;
                    ItemTypes ItemType;
                    ubyte padding[3];
                }ItemData<name="Item Data", read=GetItemNames>;
            }
        }Table1Data<name="Items", bgcolor=cLtGreen>;
    }Table1<name="Item Table">;

    FSeek(Header.PointertoTable2);
    struct TABLE2 {
        struct TABLE2HEADER {
            uint Header;
            uint Table2Num;
            uint Table2Size;
            ubyte Padding[0x34];
        }Table2Header<bgcolor=cRed>;
        struct TABLE2DATA {
            ubyte Unk[Table2Header.Table2Size];
        }Table2Data[Table2Header.Table2Num]<bgcolor=cLtBlue>;
    }Table2;

}File;

string GetItemNames(ITEMDATA &p)
{
return EnumToString(p.NameofItems);
}

