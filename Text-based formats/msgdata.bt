//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: msgdata.bin / 0.bin
//   Authors: Moonling, Sloth
//   Version: 1.1
//   Purpose: 3H Text Editing
//   History: 
//------------------------------------------------
LittleEndian();
local int i;
local int ii;
local int iii;
local int relativePos;

struct FILE {
    struct HEADER {
        uint NumOfSections<name="Number of Sections">;
        struct SECTIONS {
            uint SectionPTR<name="Section Pointer">;
            uint SectionSize<name="Section Size">;
        }sections[header.NumOfSections]<name="Sections">;
    }header<name="Header", bgcolor=cRed>;

    for (i = 0; i < header.NumOfSections; i++)
    {
        FSeek(header.sections[i].SectionPTR);
        struct SECTION {
           struct SECTIONHEADER {
                uint NumOfTables<name="Number of Tables">;
                struct TABLES {
                    uint TablePTR<name="Table PTR">;
                    uint TableSize<name="Table Size">;
                }tables[sectionHeader.NumOfTables]<name="Tables">;
           }sectionHeader<name="Header", bgcolor=cLtPurple>; 

        for (ii = 0; ii <section[i].sectionHeader.NumOfTables; ii++)
        {
            FSeek(header.sections[i].SectionPTR + section[i].sectionHeader.tables[ii].TablePTR);
            relativePos = FTell();
            struct TABLE {
                struct TABLEHEADER {
                    uint MagicID<name="Magic ID">;
                    ushort TableSize;
                    ushort Unk;
                    ushort NumOfPTRs;
                    ushort PTRSize;
                    uint TablePTR;
                    uint Unk;
                }tableHeader<name="Header", bgcolor=cLtBlue>;

                uint TextPointers[table[ii].tableHeader.NumOfPTRs]<name="Text Pointers", bgcolor=cLtRed>;
                struct TEXT {
                    for (iii = 0; iii < table[ii].tableHeader.NumOfPTRs; iii++)
                    {
                        FSeek((table[ii].TextPointers[iii] + 0x14 + relativePos));
                        struct LINES {
                            char line[ReadStringLength(FTell())]<fgcolor=cYellow>;
                        }textLines<name="Lines", read=DisplayLineAsValue>;
                    }
                }text<name="Text">;
            }table<name="Table">;
        }
        }section<name="Language Section">;
    }
}file<name="msgdata">;

string DisplayLineAsValue(LINES &l)
{
    return WStringToString(l.line, CHARSET_UTF8);
}