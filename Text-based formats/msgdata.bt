//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: msgdata.bin / 0.bin
//   Authors: Moonling, Sloth
//   Version: 1.1
//   Purpose: 3H Text Editing
//   History: 
//------------------------------------------------
LittleEndian();
local int i;
local int ii;
local int iii;
local int relativePos;

struct FILE {
    struct HEADER {
        uint NumOfSections<name="Number of Sections">;
        struct SECTIONS {
            uint SectionPTR<name="Section Pointer">;
            uint SectionSize<name="Section Size">;
        }sections[header.NumOfSections]<name="Sections">;
    }header<name="Header", bgcolor=cRed>;

    struct LANGUAGES {
        for (i = 0; i < header.NumOfSections; i++)
        {
            FSeek(header.sections[i].SectionPTR);
            struct SECTION {
            local int Language = i;
               struct SECTIONHEADER {
                    uint NumOfTables<name="Number of Tables">;
                    struct TABLES {
                        uint TablePTR<name="Table PTR">;
                        uint TableSize<name="Table Size">;
                    }tables[sectionHeader.NumOfTables]<name="Tables">;
               }sectionHeader<name="Header", bgcolor=cLtPurple>; 
    
            for (ii = 0; ii <section[i].sectionHeader.NumOfTables; ii++)
            {
                FSeek(header.sections[i].SectionPTR + section[i].sectionHeader.tables[ii].TablePTR);
                relativePos = FTell();
                struct TABLE {
                    struct TABLEHEADER {
                        uint MagicID<name="Magic ID">;
                        ushort TableSize;
                        ushort Unk;
                        ushort NumOfPTRs;
                        ushort PTRSize;
                        uint TableHeaderSize;
                        uint Unk;
                    }tableHeader<name="Header", bgcolor=cLtBlue>;
    
                    uint TextPointers[table[ii].tableHeader.NumOfPTRs]<name="Text Pointers", bgcolor=cLtRed>;
                    struct TEXT {
                        for (iii = 0; iii < table[ii].tableHeader.NumOfPTRs; iii++)
                        {
                            FSeek((table[ii].TextPointers[iii] + 0x14 + relativePos));
                            struct LINES {
                                char line[ReadStringLength(FTell())]<fgcolor=cYellow>;
                            }textLines<name="Lines", read=DisplayLineAsValue>;
                        }
                    }text<name="Text">;
                }table<name="Table">;
            }
            }section<name=GetLanguage>;
        }
    }languages<name="Languages">;
}file<name="msgdata">;

string DisplayLineAsValue(LINES &l)
{
    return WStringToString(l.line, CHARSET_UTF8);
}
string GetLanguage(SECTION &l)
{
    switch(l.Language){
        case(0):
        {
            return "Japanese";
        break;
        }
        case(1):
        {
            return "American English";
        break;
        }
        case(2):
        {
            return "European English";
        break;
        }
        case(3):
        {
            return "German";
        break;
        }
        case(4):
        {
            return "European French";
        break;
        }
        case(5):
        {
            return "American French";
        break;
        }
        case(6):
        {
            return "European Spanish";
        break;
        }
        case(7):
        {
            return "American Spanish";
        break;
        }
        case(8):
        {
            return "Italian";
        break;
        }
        case(9):
        {
            return "Korean";
        break;
        }
        case(10):
        {
            return "Simplified Chinese";
        break;
        }
        case(11):
        {
            return "Traditional Chinese";
        break;
        }
        default:
        {
            return "Language Section";
        break;
        }
    }
}
