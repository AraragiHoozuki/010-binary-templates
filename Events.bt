//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: event/talk_event/script (6341-7437)
//   Authors: Sloth
//   Version: Beta
//   Purpose: Read event scripts
//------------------------------------------------

/* To-Figure Out
OF Might be initial camera
0D Might be temporary camera   
49 Zoom in

Control mouth flaps: Check C Support Alois + Dimitri


7120 (AshePetra_C)
    sfx:
    2B, 49, 8A

    Focus On :
    5E
    
    Camera_tracking to Right:
    53

    Camera Stop:
    0D

7121 (AshePetra_B)
    focus on Left side of:
    5B

0B
    Can Delay animation til end of dialogue character, animation, 01, 01


A support w/ Lin and Edelgard good w/ Caspar and Cath to study camera 
*/

#include "Enum/Event_Enums.bt"

LittleEndian();

struct struct_Header
{
    uint32 NumberOfScripts<name="Number of Scripts">;
    uint32 Unknown;
    uint32 Unknown;
    uint32 Unknown;
}header<bgcolor=cGreen, name="Header">;

local int i = 0;
int magic<hidden=true>;
local int scriptEvent = magic;


for(i = 0; i < header.NumberOfScripts; i++)
{
    switch(scriptEvent)
    {
        case(0x0):
        {
            struct struct_CubeScenes
            {
                Cube Cube_Scene<name="Cube Scene", bgcolor=cRed>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
            }cubeScenes<name="Cube Scene", read=readCubeScenes>;
        break;
        }
        case(0x1):
        {
            struct struct_Characters{
                Name Character<bgcolor=cYellow, name="Character", comment="If a support event, this is a support partner">;
                Name Character<bgcolor=cYellow, name="Character", comment="If a support event, this is a support partner">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
            }characters<bgcolor=cRed, name="Character List">;
        break;
        }
        case(0x4):
        {
            struct struct_Scenes
            {
                Scene_Event Event<name="Event">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
            }scenes<name="Scene", read=readScenes>;
        break;
        }
        case(0x3):
        {
            struct struct_DialogueBox
            {
                Name Character<bgcolor=cYellow, name="Character">;
                int Text_Line<name="Text line">;
                Animation Character_Pose<name="Pose">;
                Expression Portait_Expression<name="Portrait Expression">;
                int Voice_Line<name="Voice Line">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }dialogueBox<name="Dialogue Box", read=readDialogue>;
        break;
        }
        case(0x18):
        {
            struct struct_HeadMotionX
            {
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }headmotionx<name="Head Motion: x-axis">;
        break;
        }
        case(0x17):
        {
            struct struct_BodyMotion // Only X-Axis
            {
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }Bodymotion<name="Body Motion", read=readBodyMotion>;
        break;
        }
        case(0x45):
        {
            struct struct_HeadMotionY
            {
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }headmotiony<name="Head Motion: y-axis">;
        break;
        }
        case(0x60):
        {
            struct struct_EmoteEffect
            {
                Name Character<bgcolor=cYellow, name="Character">;
                Emote_Effect Effect<name="Emote Effect">;
                Play_At Play<name="Play At:">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }emoteEffect<name="Emote Effect", read=readEmoteEffect>;
        break;
        }
        case(0xD):
        {
            struct struct_CameraChange
            {
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }cameraChange<name="Camera Change">;
        break;
        }
        case(0xF):
        {
            struct struct_CameraTrackingPan // Moving to Left & Sort of zoom
            {
                Name Character<name="Character", comment="If 0xFF, tracks first character listed in the scene">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }cameraPan<name="Camera: Tracking Pan">;
        break;
        }
        case(0x19):
        {
            struct struct_CameraFade
            {
                Cube Cube_Scene<name="Cube Scene">;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
            }cameraFade<name="Camera: Fade", comment="Can fade into new cube scene", read=readCameraFade>;
        break;
        }
        case(0x5E):
        {
            struct struct_CameraFocus
            {
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;    // 0E is zoom 0B is rotate
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }cameraFocus<name="Camera: Focus On", read=readCameraFocus>;
        break;
        }
        default:
        {
            struct struct_Script
            {
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }script<name="Script Block">;
        break;
        }
    }
    if(i < header.NumberOfScripts - 1)
    {
        int newMagic<hidden=true>;
        scriptEvent = newMagic;
    }
}



string readDialogue(struct_DialogueBox &p)
{
    return EnumToString(p.Character);
}

string readBodyMotion(struct_BodyMotion &p)
{
    return EnumToString(p.Character);
}

string readCameraFocus(struct_CameraFocus &p)
{
    return EnumToString(p.Character);
}

string readScenes(struct_Scenes &p)
{
    return EnumToString(p.Event);
}
string readEmoteEffect(struct_EmoteEffect &p)
{
    return EnumToString(p.Character);
}

string readCubeScenes(struct_CubeScenes &p)
{
    return EnumToString(p.Cube_Scene[0]);
}

string readCameraFade(struct_CameraFade &p)
{
    return EnumToString(p.Cube_Scene[0]);
}
