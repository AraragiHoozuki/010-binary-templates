//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: event/talk_event/script (6341-7437)
//   Authors: Sloth
//   Version: Beta
//   Purpose: Read event scripts, mainly supports (6682-7437)
//------------------------------------------------

#include "Enum/Event_Enums.bt"

LittleEndian();

struct struct_Header{
    uint32 NumberOfFunctions<name="Number of Scripts">;
    uint32 Unknown;
    uint32 Unknown;
    uint32 Unknown;
}header_info<bgcolor=cGreen, name="Header">;

local int i = 0;
local int magicFunction = ReadInt();

for(i = 0; i < header_info.NumberOfFunctions; i++){
    switch(magicFunction){
        case(0x0): 
        {
            struct struct_CubeScenes{
                Function Function_Name<name="Function Name", format=hex>;
                Cube Cube_Scene<name="Cube Scene", bgcolor=cRed>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
                Cube Cube_Scene<name="Cube Scene", hidden=true>;
            }CubeScenes_info<name="Cube Scene", read=readCubeScenes>;
        break;
        }
        case(0x1):
        {
            struct struct_Characters{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character", comment="If a support event, this is a support partner">;
                Name Character<bgcolor=cYellow, name="Character", comment="If a support event, this is a support partner">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
            }Characters_info<bgcolor=cRed, name="Character List">;
        break;
        }
        case(0x4):
       {
            struct struct_SceneEvent{
                Function Function_Name<name="Function Name", format=hex>;
                Scene_Event Event<name="Event Function">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
            }Scene_info<name="Scene Event", read=readSceneEvent>;
        break;
        }
        case(0x5):
        {
            struct struct_SceneCharacterEvent{
                Function Function_Name<name="Function Name", format=hex>;
                Scene_Character_Event Event<name="Event Function">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
                Name Character<bgcolor=cYellow, name="Character">;
            }SceneCharacter_info<name="Scene Character Event">;
        break;
        }
        case(0x3):
        {
            struct struct_DialogueBox{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                int Text_Line<name="Text Line">;
                Animation Character_Animation<name="Animation">;
                Expression Portait_Expression<name="Portrait Expression">;
                int Voice_Line<name="Voice Line">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }DialogueBox_info<name="Dialogue Box", read=readDialogue>;
        break;
        }
        case(0x10):
        {
            struct struct_BGMChange{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }BGMChange_info<name="BGM Change">;
        break;
        }
        case(0x18):
        {
            struct struct_HeadMotionX{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }HeadMotionX_info<name="Head Motion: x-axis">;
        break;
        }
        case(0x45):
        {
            struct struct_HeadMotionY{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }HeadMotionY_info<name="Head Motion: y-axis">;
        break;
        }
        case(0xB):
        {
            struct struct_Animation{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                Animation Character_Pose<name="Pose">;
                Play_At Play<name="Play At:">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }Animation_info<name="Animation", read=readAnimation, comment="Used primarily when character isn't speaking or at start of scene">;
        break;
        }
        case(0x11):
        {
            struct struct_SoundEffect{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }SoundEffect_info<name="Sound Effect">;
        break;
        }
        case(0x17):
        {
            struct struct_BodyMotion{  // Only X-Axis 
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }BodyMotion_info<name="Body Motion", read=readBodyMotion>;
        break;
        }
        case(0x60):
        {
            struct struct_EmoteEffect{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                Emote_Effect Effect<name="Emote Effect">;
                Play_At Play<name="Play At:">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }EmoteEffect_info<name="Emote Effect", read=readEmoteEffect>;
        break;
        }
        case(0x12):
        {
            struct struct_PopupCard{
                Function Function_Name<name="Function Name", format=hex>;
                Card SceneCard<name="Popup Card">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }PopupCard_info<name="Popup Card">;
        break;
        }
        case(0x69):
        {
            struct struct_SceneCard{
                Function Function_Name<name="Function Name", format=hex>;
                Card SceneCard<name="Scene Card">;            // decimal 100 is start @ Edelgard
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }SceneCard_info<name="Scene Card">;
        break;
        }
        case(0x21):
        {
            struct struct_DialogueChoices{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
                int Text_Line<name="Text Line">;
            }DialogueChoices_info<name="Dialogue Choices", comment="The conditional block of the first choice will be between 'Conditional Statement' and 'Start of Conditional'">;
        break;
        }
        case(0x23):
        {
            struct struct_Conditional{
                Function Function_Name<name="Function Name", format=hex>;
                Conditional Statement<name="Statement">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }Conditional_info<name="Conditional Statement", comment="Between 'Conditional Statement' and 'Start of Conditional' is the else statement">;
        break;
        }
        case(0x24):
        {
            struct struct_EndConditional{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }EndConditional_info<name="End of Conditional">;
        break;
        }
        case(0x25):
        {
            struct struct_StartConditional{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }StartConditional_info<name="Start of Conditional">;
        break;
        }
        case(0x2D):
        {
            struct struct_SupportPoints{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<name="Support Character">;
                Support Support_Points<name="Support Points">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }SupportPoints_info<name="Support Points", read=readSupportPoints>;
        break;
        }
// Camera

        case(0xD):
        {
            struct struct_CameraChange{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }CameraChange_info<name="Camera Change">;
        break;
        }
        case(0xF):
        {
            struct struct_CameraStandard{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }CameraStandard_info<name="Camera: Standard">;
        break;
        }
        case(0x19):
        {
            struct struct_CameraFade{
                Function Function_Name<name="Function Name", format=hex>;
                Cube Cube_Scene<name="Cube Scene">;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }CameraFade_info<name="Camera: Fade", comment="Can fade into new cube scene", read=readCameraFade>;
        break;
        } /*
        case(0x5E):
        {
            struct struct_CameraFocus{
                Function Function_Name<name="Function Name", format=hex>;
                Name Character<bgcolor=cYellow, name="Character">;
                int Unknown;
                int Unknown;    // 0E is zoom 0B is rotate
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }CameraFocus_info<name="Camera: Focus On", read=readCameraFocus>;
        break;
        } */
        default:
        {
            struct struct_Script{
                Function Function_Name<name="Function Name", format=hex>;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
                int Unknown;
            }Script_info<name="Script Block">;
        break;
        }
    }
    if(i < header_info.NumberOfFunctions - 1){
        magicFunction = ReadInt();
    }
}

// Read Functions

string readDialogue(struct_DialogueBox &p){
    return EnumToString(p.Character);
}

string readBodyMotion(struct_BodyMotion &p){
    return EnumToString(p.Character);
}

/*
string readCameraFocus(struct_CameraFocus &p){
    return EnumToString(p.Character);
}
*/

string readEmoteEffect(struct_EmoteEffect &p){
    return EnumToString(p.Character);
}

string readAnimation(struct_Animation &p){
    return EnumToString(p.Character);
}

string readSceneEvent(struct_SceneEvent &p){
    return EnumToString(p.Event);
}

string readCubeScenes(struct_CubeScenes &p){
    return EnumToString(p.Cube_Scene[0]);
}

string readCameraFade(struct_CameraFade &p){
    return EnumToString(p.Cube_Scene[0]);
}

string readSupportPoints(struct_SupportPoints &p){
    string stringSupportPartner = EnumToString(p.Character);
    string stringSupportPoints = EnumToString(p.Support_Points);
    string stringReturn = "Support " + stringSupportPoints + " with " + stringSupportPartner;
    return stringReturn;
}
