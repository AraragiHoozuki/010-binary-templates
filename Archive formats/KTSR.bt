//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: KTSR.bt
//   Authors: DeathChaos, 0Liam
//   Version: 1.02
//   Purpose: Koei Tecmo File Container
//   Category: 
//   File Mask: *.ktsl2stbin, *.bin
//   ID Bytes: KTSR
//   History
//   1.00    2019-08-05  DeathChaos - started this
//   1.01    2019-08-06  DeathChaos - Minor Code Cleanup
//   1.02    2019-08-19  0Liam      - Added support for other KTSR types and refactored code
//------------------------------------------------

LittleEndian();

struct {
	char magic[0x4];
	uint32 type_id;
	ushort flags; // bit0 = Has Files?
	ushort console_type;
	uint32 game_id;
	uint64 padding_1;
	uint32 decompressed_size;
	uint32 compressed_size;
} ktsr <bgcolor=cYellow, size=0x40>;

struct SECTION {
	uint32 type_id;
	uint32 sectionSize;
	if (type_id == 0x70CBCCC5 && sectionSize == 0x60) { // info_section (inside ktsl2asbin, linked to ktsl2stbin)
		uint32 link_id;
		ubyte unknown_1[0x10];
		uint32 headerSize<format=hex>;
		uint32 subTypeId;
		uint32 subSectionSize<format=hex>;
		uint32 unk;
		uint32 channelCount;
		uint32 musicTransitionRelated;
		uint32 unk;
		uint32 sampleRate;
		uint32 sampleCount;
		uint32 unknown_2;
		uint32 loopStart;
		ubyte unknown_3[0xC];
		uint32 KTSSOffset<format=hex>;
		uint32 KTSSSize<format=hex>;
		uint32 unknown_4;
	} else if (type_id == 0x15F4D409) { // // ktss_section (inside ktsl2stbin)
		uint32 link_id;
		uint32 unknown_1;
		uint32 kns_size;
		ubyte padding_1[0x2C];
	} else if (type_id == 0xA8DB7261) { // padding_section
		ubyte padding_1[sectionSize - 0x8];
	} else if (type_id == 0x368C88BD) { // unknown_section
		uint32 link_id;
		short channelCount;
		short layerCount;
		uint32 padding;
		uint32 cancel;
		ubyte unknown_1[sectionSize - 0x18];
	} else { // unknown
        uint32 link_id;
		ubyte unknown_1[sectionSize - 0xC];
	};
};

if (ktsr.type_id == 0xFCDD9402) { // ktsl2stbin
	local TFindResults kns = FindAll("KTSS");
	struct {
		SECTION ktss_section <bgcolor=cRed>;
		struct FILE {
		char magic[0x4]<name="Magic">;
		uint32 sectionSize<name="Section size", format=hex>;
		byte paddingHeader[0x20 - FTell() % 0x20]<name="Padding">;
		byte codecID<name="Codec ID">;
		byte unk1;
		byte unk2;
		byte unk3;
		uint32 codecStartOffset<name="Codec start offset", format=hex>;
		byte layerCount<name="Layer count", format=decimal>;
		byte channelCount<name="Channel count", format=decimal>;
		short unk4;
		uint32 sampleRate<name="Frequency (KTSS)", comment="The frequency at which the KTSS is read", format=decimal>;
		uint32 sampleCount<name="Num sample...?", format=decimal>;
		uint32 loopStartSample<name="Loop start", comment="In sample block", format=decimal>;
        uint32 loopLength<name="Loop length", comment="In sample block", format=decimal>;
        uint32 padding<name="Moar padding">;
		uint32 audioOffset<name="Audio section address", format=hex>;
        uint32 dataSize<name="Audio section size", format=hex>;
		uint32 dunno<name="Dunno", format=decimal>;
		uint32 packetCount<name="Packet count">;
        short packetSize<name="Packet size", format=hex>;
        short someConstant<name="Some constant", comment="Always 0x3C0 so far">;
        uint32 inputSampleRate<name="Frequency (original)", comment="The frequency the original file was using", format=decimal>;
        short preSkip<name="Skip", comment="Initial delay for complicated audio shit">;
        byte streamCount<name="Stream count">;
        byte coupledCount<name="Coupled count">;
        byte channelMappingFamily[channelCount]<name="Channel mapping family">;
        byte padding2[0x70 - FTell() % 0x70]<name="Big tiddy padding">;
        struct AUDIO {
            struct PACKETS {
                BigEndian();
                uint32 size;
                LittleEndian();
                uint32 unk;
                byte content[size];
            } Packets[packetCount]<name="Packet", optimize=false>;
        } Audio<name="Audio Section">;
} KTSS<name="KTSS Section">;
	} ktss<optimize=false>;
} else if (ktsr.type_id == 0x1A487B77) { // ktsl2asbin
	local TFindResults unknown = FindAll(0x368C88BD);
	local TFindResults padding = FindAll(0xA8DB7261);
	local TFindResults info = FindAll(0x70CBCCC5);
	SECTION unknown_section[unknown.count] <optimize=false, bgcolor=cRed>;
	SECTION padding_section[padding.count] <optimize=false, bgcolor=cBlue>;
	SECTION info_section[info.count] <optimize=false, bgcolor=cGreen>;
} else if (ktsr.type_id == 0x9EE638C6) { // ktsl2gcbin - only tested on GlobalConfig.ktsl2gcbin, there may be more sections
	local TFindResults unknown1 = FindAll(0xE0736214);
	local TFindResults unknown2 = FindAll(0x009E4D89);
	local TFindResults unknown3 = FindAll(0x3CC43F64);
	local TFindResults unknown4 = FindAll(0xFDBC6FE2);
	local TFindResults unknown5 = FindAll(0x6D8C8F46);
	local TFindResults unknown6 = FindAll(0xBFC43B5D);
	SECTION unknown1_section[unknown1.count] <optimize=false, bgcolor=cRed>;
	SECTION unknown2_section[unknown2.count] <optimize=false, bgcolor=cBlue>;
	SECTION unknown3_section[unknown3.count] <optimize=false, bgcolor=cGreen>;
	SECTION unknown4_section[unknown4.count] <optimize=false, bgcolor=cPurple>;
	SECTION unknown5_section[unknown5.count] <optimize=false, bgcolor=cLtRed>;
	SECTION unknown6_section[unknown6.count] <optimize=false, bgcolor=cLtBlue>;
	ubyte padding_1[0x10 - FTell() % 0x10] <bgcolor=cLtGreen>;
};
