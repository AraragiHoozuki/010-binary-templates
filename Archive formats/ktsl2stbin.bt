//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: BGM.ktsl2stbin
//   Authors: DeathChaos
//   Version: 1.00
//   Purpose: Koei Tecmo container for BGM
//   Category:  
//   File Mask: 
//   ID Bytes: KTSR
//   History
//   1.00    2019-08-05  DeathChaos - started this
//   1.01    2019-08-06  DeathChaos - Minor Code Cleanup
//------------------------------------------------

LittleEndian();

local TFindResults r = FindAll( "KTSS" );
local int KTSSNum = r.count;

struct File{
    struct HEADER{
        char magic[4]; //"KTSR"
        uint32 Unknown1;
        uint64 Unknown2;
        uint64 Unknown3;
		struct FileSizeValue{
			uint32 FileSize<name="Total Filesize">;
			uint32 FileSize<name="Total Filesize">;
        }filesizevalue<name="Filesize">;
		byte padding[FTell() % 64]<name="Header EoF padding">; // align 0x40
	}header<bgcolor=cYellow,name="KTSR Header">;
	struct BGMHeader{
		uint32 UnkPointer<bgcolor=cRed,name="Unknown Pointer/Checksum">; 
		uint32 TotalSoundSize<bgcolor=cRed,name="Total Size of this Sound">; // size until next pointer, KTSS should be 0x3C after this
		uint32 pointer<bgcolor=cRed,name="Unknown Pointer/Checksum">;
		uint32 pointer<bgcolor=cRed,name="Always 0x40">;
		uint32 SizeAfterPaddingOfThisStruct<bgcolor=cRed,name="Size without padding?">;
		struct PADDING2{
			uint32 pointer<bgcolor=cRed>;
			uint32 pointer<bgcolor=cRed>;
			uint32 pointer<bgcolor=cRed>;
			uint64 padding;
			uint64 padding;
			uint64 padding;
			uint64 padding;
		}padding2<name="Padding">;
		byte section[TotalSoundSize-64]<name="Sound File",bgcolor=cPurple>; // filesize is included in the header which is 0x40 size
		//byte padding[FTell() % 64]<name="EoF padding">; // align 0x40
    }bgmheader[KTSSNum]<bgcolor=cBlue,optimize=false,name="Sound Archive">;
}file<name="KTSR File">;