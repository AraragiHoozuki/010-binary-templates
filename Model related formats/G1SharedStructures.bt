//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: G1SharedStructures.bt
//   Authors: HealingBrew
//   Version: 1.0.1
//   Purpose: Shared formats in G1 assets
//  Category: File Format
//   History:
//   1.0.1  2019-12-26 Lukas Cone: Updated Align method, Quaternion namings.
//   1.0    2019-11-01 HealingBrew: Initial File
//------------------------------------------------

#ifndef G1M_SHAREDSTRUCTURES
#define G1M_SHAREDSTRUCTURES

typedef struct GRESOURCESECTIONHEADER {
    char magic[4]<name="Magic", comment="reversed">;
    char version[4]<name="Version", comment="reversed">;
    int32 size<name="Size", format=hex>;
} GResourceSectionHeader;

typedef struct G1MARRAYRESOURCESECTIONHEADER {
    short magic<name="Magic">;
    short unknown<name="Unknown">;
    int size<name="Size">;
    int count<name="Count">;
} G1MArrayResourceSectionHeader;

typedef struct VECTOR3 {
    float x<name="x">;
    float y<name="y">;
    float z<name="z">;
} Vector3;

typedef struct HALFVECTOR3 {
    hfloat x<name="x">;
    hfloat y<name="y">;
    hfloat z<name="z">;
} HalfVector3;

typedef struct QUATERNION {
    float x<name="x">;
    float y<name="y">;
    float z<name="z">;
    float w<name="axis">;
} Quaternion;


typedef struct HALFQUATERNION {
    hfloat x<name="x">;
    hfloat y<name="y">;
    hfloat z<name="z">;
    hfloat w<name="axis">;
} HalfQuaternion;

typedef struct MATRIX44 {
    float indices[16];
} Matrix44;

typedef struct HALFMATRIX44 {
    hfloat indices[16];
} HalfMatrix44;

string GetSectionName(GRESOURCESECTIONHEADER &section) {
    local char version[4];
    version[0] = section.version[3];
    version[1] = section.version[2];
    version[2] = section.version[1];
    version[3] = section.version[0];
    local string tmp = "aaaa v0000";
    SPrintf(tmp, "%c%c%c%c v%d", section.magic[3], section.magic[2], section.magic[1], section.magic[0], Atoi(version));
    return tmp;
}

void G1Helper_AlignBytes(int n) {
    local int value = FTell() % n;

    if (value) {
        FSkip(n - value);
    }
}

void G1Helper_AlignBytesReverse(int n) {
    local int value = FTell() % n;

    if (value) {
        FSeek(FTell() - value);
    }
}

typedef uint64 ulonglong;

#endif // G1M_SHAREDSTRUCTURES
