//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: G1MG_VertexAttribute.bt
//   Authors: HealingBrew
//   Version: 1.0
//   Purpose: Outlines VertexAttribute format found in G1MG sections
//  Category: Game File
// File Mask: 
//  ID Bytes:
//   History:
//  1.0 2019-11-06  HealingBrew: Created the file
//------------------------------------------------

#ifndef G1M_GEOMETRY_VERTEXATTRIBUTE
#define G1M_GEOMETRY_VERTEXATTRIBUTE

typedef enum <ushort> G1MGEOMETRYVERTEXATTRIBUTETYPE {
    VertexAttributeType_Float32_x3 = 0x0002,
    VertexAttributeType_Float32_x4 = 0x0003,
    VertexAttributeType_Byte_x4 = 0x0005,
    VertexAttributeType_Half_x2 = 0x000A,
    VertexAttributeType_Half_x4 = 0x000B,
    VertexAttributeType_NormalizedByte_x4 = 0x000D // divide by 0xFF.
} G1MGeometryVertexAttributeType;

typedef enum <byte> G1MGEOMETRYVERTEXATTRIBUTESEMANTIC {
    VertexAttributeSemantic_Position = 0,
    VertexAttributeSemantic_BoneWeight,
    // HealingBrew:
    //      so a weird thing is happening with bone index
    //      there are a number of ways to resolve the G1MS bone from this index
    //      but they all have their own issues, especially when introducing NUNO structures
    //      the "safest" way is to get G1MG_BoneBinds using the G1MG_SubMesh bone_table_index value
    //      then divide each value by 3 if it's not -1 and get the bone ID from the BoneBinds table.
    //      this is an index in the Bone Set list, NOT the Bone Indices list.
    //      how the game determines which G1MS to use, or which bone set is undetermined.
    //      I don't know what's going on here.
    VertexAttributeSemantic_BoneIndex,
    VertexAttributeSemantic_Normal,
    VertexAttributeSemantic_BiNormal,
    VertexAttributeSemantic_UV,
    VertexAttributeSemantic_Tangent,
    VertexAttributeSemantic_BiTangent,
    VertexAttributeSemantic_Unknown8,
    VertexAttributeSemantic_Unknown9,
    VertexAttributeSemantic_Color,
    VertexAttributeSemantic_Fog
} G1MGeometryVertexAttributeSemantic;

typedef struct G1MGEOMETRYVERTEXATTRIBUTE {
    short index<name="Index">;
    short offset<name="Offset">;
    G1MGeometryVertexAttributeType type<name="Type">;
    G1MGeometryVertexAttributeSemantic semantic<name="Semantic">;
    byte layer<name="Layer">;
} G1MGeometryVertexAttribute;

typedef struct G1MGEOMETRYVERTEXATTRIBUTESET {
    int index_count<name="Index Count">;
    int indices[index_count]<name="Indices">;
    int attribute_count<name="Attribute Count">;
    G1MGeometryVertexAttribute attributes[attribute_count]<name="Attributes">;
} G1MGeometryVertexAttributeSet;

#endif // G1M_GEOMETRY_VERTEXATTRIBUTE
