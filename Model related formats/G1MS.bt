//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: G1MS.bt
//   Authors: Raytwo
//   Version: 1.0
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History:
//  1.0 2019-08-27  Raytwo: Created the file
//------------------------------------------------

LittleEndian();

struct FILE {
    local int start = FTell();
    struct SECTIONHEADER {
        char magic[4]<name="Magic", fgcolor=cLtBlue>;
        char version[4]<name="Version", fgcolor=cLtBlue>;
        uint32 sectionsize<name="Section size", fgcolor=cLtYellow, format=hex>;
    }SectionHeader<name="Section header", read=GetSectionName>;
    struct G1MSSECTION {
        uint32 dataoffset<name="Data region offset", fgcolor=cLtGreen, format=hex>;
        uint32 skelCount<name="Boneset count", fgcolor=cLtAqua>;
        uint16 boneCount<name="Bone count", fgcolor=cPurple>;
        uint16 boneTableCount<name="Bone table count", fgcolor=cLtRed>;
        uint16 unk;
        uint16 unk;
        int16 boneindices[boneTableCount]<name="Bone indices", bgcolor=cDkBlue, fgcolor=cLtAqua>;
        struct BONES {
            local int i = 0;
            uint16 usedBoneCount<name="Bone entry count", fgcolor=cLtRed>;
            for(i = 0; i < boneTableCount; i++)
            {
                if(boneindices[i] != -1)
                {
                    FSeek(dataoffset + (0x30 * boneindices[i]));
                    struct BONE
                    {
                        struct SCALE {
                            float X;
                            float Y;
                            float Z;
                        } Scale<name="Scale">;
                        int32 parentIndex<name="Parent bone index", format=decimal>;
                        struct QUATERNION {
                            float W<name="Rotation component">;
                            float X;
                            float Y;
                            float Z;
                        } Quaternion<name="Quaternion">;
                        struct POSITION {
                            float X;
                            float Y;
                            float Z;
                        } Position<name="Position">;
                        float unk;
                    } Bone<name="Bone", size=0x30>;
                }
            }
        } Bones<name="Bones", fgcolor=cLtGreen, bgcolor=cDkGray>;
    }G1MS<name="G1MS", open=true>;
}File<name="Section", open=true>;

string GetSectionName(SECTIONHEADER &s)
{
    return s.magic;
}
