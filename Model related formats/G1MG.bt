//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: G1MG.bt
//   Authors: Raytwo
//   Version: 1.0
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History:
//	1.0	2019-08-28	Raytwo: Created the file
//------------------------------------------------

LittleEndian();

struct FILE {
	local int start = FTell();
	struct SECTIONHEADER {
		char magic[4]<name="Magic", fgcolor=cLtBlue>;
		char version[4]<name="Version", fgcolor=cLtBlue>;
		uint32 sectionsize<name="Section size", fgcolor=cLtYellow, format=hex>;
	} SectionHeader<name="Section header", read=GetSectionName>;

	struct G1MGSECTION {
		char type[3]<name="Type", fgcolor=cLtGreen>;
		FSkip(1);
		float boundingVolume[7];
		uint32 unk<name="Some count?", comment="Always 0x9", format=hex>;

		struct MATERIALSSECTION {
			struct MATERIALSHEADER{
				uint32 unk<name="Some magic?", format=hex>;
				uint32 sectionSize<name="Section size", format=hex>;
				uint32 entryCount<name="Entry count">;
				uint32 unk<format=hex>;
			} MaterialsHeader<name="Materials header">;

			struct MATERIALSUNK {
				struct MATERIALSUNKENTRY{
					struct MATERIALSUNKSUBENTRY {
						float unk;
						float unk;
						float unk;
						float unk;
						uint32 unk;
						uint32 unk;
						uint32 unk;
						uint16 somevalue;
						uint16 padding;
					} MaterialsUnkSubEntry[2]<name="Materials Unk Sub Entry", size=0x20>;
				} MaterialsUnkEntry<name="Materials Unk Entry", size=0x40>;
			} MaterialsUnk[MaterialsHeader.entryCount]<name="Unknown section", format=hex>;
		} MaterialsSection<name="Materials section">;
	} G1MG<name="G1MG", open=true>;
} File<name="File", open=true>;

string GetSectionName(SECTIONHEADER &s)
{
	return s.magic;
}
