//-------------------------------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: Job.bin / 11.bin / classdata.bin
//   Authors: DeathChaos
//   Version: 1.03
//   Purpose: Three Houses character file mapping
//   History
//   1.00    2019-08-28  DeathChaos - started this
//   1.01    2019-08-28  DeathChaos - added class names to struct indices
//   1.02    2019-09-11  TildeHat - added mapping to class data and abilities
//   1.03    2019-09-13  Moonling - added reclassing item
//-------------------------------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "3H_Enums.bt"

LittleEndian();
struct File{
	struct SectionPointers{
		uint32 NumberOfSectionPointers;
		uint32 ClassDataPointer<bgcolor=cRed>;
		uint32 UnkSize<bgcolor=cRed>;
		uint32 PointerToGenderLock<bgcolor=cPurple>;
		uint32 GenderLockSize<bgcolor=cPurple>;
		uint32 TierLevelPointer<bgcolor=cBlue>;
		uint32 TierLevelSize<bgcolor=cBlue>;
		uint32 ClassAbilityPointer<bgcolor=cDkYellow>;
		uint32 ClassAbilitySize<bgcolor=cDkYellow>;
		uint32 UnkPointer<bgcolor=cDkBlue>;
		uint32 UnkSize<bgcolor=cDkBlue>;
		uint32 UnkPointer<bgcolor=cBlack>;
		uint32 UnkSize<bgcolor=cBlack>;
		uint32 UnkPointer<bgcolor=cGreen>;
		uint32 UnkSize<bgcolor=cGreen>;
		uint32 UnkPointer<bgcolor=cDkRed>;
		uint32 UnkSize<bgcolor=cDkRed>;
		uint32 UnkPointer<bgcolor=cDkPurple>;
		uint32 UnkSize<bgcolor=cDkPurple>;
		uint32 UnkPointer<bgcolor=cDkGreen>;
		uint32 UnkSize<bgcolor=cDkGreen>;
		
	}sectionpointers<name="Section Pointers">;

    FSeek(sectionpointers.ClassDataPointer);
	struct ClassData
	{
		uint32 ClassDataMagic;
		uint32 numClassData;
		uint32 SizeOfClassData;
		struct ClassDataHeaderPadding{
			byte Padding[0x34];
		}classdataheaderpadding<name="Padding">;
		local int i;
        for( i = 0; i < numClassData; i++ )
		    struct ClassBlock{
                local ClassName Class<hidden=true>;
				Class = i; // keeping a localvar so we can add classname to the struct indice
		        uint32 UnknownValue;
                uint32 UnknownValue;
                uint16 MaleAID;
                uint16 FemaleAID;
		        uint32 UnknownValue;
                byte HPBase;
                uint16 UnknownValue;
                byte EnemyHPGrowth;
                struct PlayerGrowths{  
                    byte HPGrowth<name="HP Growth">;
                    byte StrGrowth<name="Str Growth">;
					byte MagGrowth<name="Mag Growth">;
					byte DexGrowth<name="Dex  Growth">;
					byte SpdGrowth<name="Spd Growth">;
					byte LckGrowth<name="Lck Growth">;
					byte DefGrowth<name="Def Growth">;
					byte ResGrowth<name="Res Growth">;
					byte MovGrowth<name="Mov Growth">;
					byte CharmGrowth<name="Cha Growth">;
                }playergrowths;
                struct EnemyGrowths{  
                    byte StrGrowth<name="Str Growth">;
					byte MagGrowth<name="Mag Growth">;
					byte DexGrowth<name="Dex  Growth">;
					byte SpdGrowth<name="Spd Growth">;
					byte LckGrowth<name="Lck Growth">;
					byte DefGrowth<name="Def Growth">;
					byte ResGrowth<name="Res Growth">;
					byte MovGrowth<name="Mov Growth">;
					byte CharmGrowth<name="Cha Growth">;
                }enemygrowths;
                struct ClassBonus{
					byte BonusStr<name="Bonus Str">;
					byte BonusMag<name="Bonus Mag">;
					byte BonusDex<name="Bonus Dex">;
					byte BonusSpd<name="Bonus Spd">;
					byte BonusLck<name="Bonus Lck">;
					byte BonusDef<name="Bonus Def">;
					byte BonusRes<name="Bonus Res">;
					byte BonusMov<name="Bonus Mov">;
					byte BonusCharm<name="Bonus Cha">;
				}classbonus<name="Class Bonus Stats">;
                struct DismountChange{
					byte BaseStr<name="Str Change">;
					byte BaseMag<name="Mag Change">;
					byte BaseDex<name="Dex Change">;
					byte BaseSpd<name="Spd Change">;
					byte BaseLck<name="Lck Change">;
					byte BaseDef<name="Def Change">;
					byte BaseRes<name="Res Change">;
					byte BaseMov<name="Mov Change">;
					byte BaseCharm<name="Cha Change">;
				}dismountchange<name="Dismount Stat Change">;
                struct RankBonus{
                    byte SwordExp<name="Sword Exp">;
                    byte LanceExp<name="Lance Exp">;
                    byte AxeExp<name="Axe Exp">;
                    byte BowExp<name="Bow Exp">;
                    byte BrawlingExp<name="Brawling Exp">;
                    byte ReasonExp<name="Reason Exp">;
                    byte FaithExp<name="Faith Exp">;
                    byte AuthorityExp<name="Authority Exp">;
                    byte ArmorExp<name="Heavy Armor Exp">;
                    byte RidingExp<name="Riding Exp">;
                    byte FlyingExp<name="Flying Exp">;
                }rankbonus<name="Rank Bonus">;
                uint16 UnknownValue;
                byte UnknownValue;
                byte ClassTier;
                uint32 UnknownValue;
                uint32 UnknownValue;
                byte UnknownValue;
                byte ClassType;
                byte ClassProperty;
                SpellID Spell1;
                SpellID Spell2;
                struct BaseStats{
					byte BaseStr<name="Base Str">;
					byte BaseMag<name="Base Mag">;
					byte BaseDex<name="Base Dex">;
					byte BaseSpd<name="Base Spd">;
					byte BaseLck<name="Base Lck">;
					byte BaseDef<name="Base Def">;
					byte BaseRes<name="Base Res">;
				}basestats<name="Base Stats">;
                uint32 UnknownValue;
                uint16 UnknownValue;
                struct HardEnemyAbility{
                    AbilityID Ability1;
                    AbilityID Ability2;
                    AbilityID Ability3;
                    AbilityID Ability4;
                    AbilityID Ability5;
                }hardenemyability;
                struct LunaticEnemyAbility{
                    AbilityID Ability1;
                    AbilityID Ability2;
                    AbilityID Ability3;
                    AbilityID Ability4;
                    AbilityID Ability5;
                }lunaticenemyability;
		}classblock<name="Class Block",read=MyStructToStringC>;
	}classdata<bgcolor=cDkBlue,name="Class Data">;

	FSeek(sectionpointers.PointerToGenderLock);
	struct GenderLock
	{
		uint32 GenderLockMagic;
		uint32 numGenderLock;
		uint32 SizeOfGenderLock;
		struct GenderLockHeaderPadding{
			byte Padding[0x34];
		}genderlockheaderpadding<name="Padding">;
		local int i;
		struct Requirements{
			for( i = 0; i < numGenderLock; i++ )
				struct GenderLockID{
					local ClassName Class<hidden=true>;
					Class = i; // keeping a localvar so we can add classname to the struct indice
					ubyte MinLv<name="Min Lv Requirement (?)">;
					ItemID RequiredItem<name="Required Item for Reclassing">;
					ubyte MaleFlag<name="Male Flag">;
					ubyte FemaleFlag<name="Female Flag">;
					MinRanks rank0<name="Minimum Sword Requirement">;
					MinRanks rank1<name="Minimum Lances Requirement">;
					MinRanks rank2<name="Minimum Axes Requirement">;
					MinRanks rank3<name="Minimum Bows Requirement">;
					MinRanks rank4<name="Minimum Brawling Requirement">;
					MinRanks rank5<name="Minimum Reason Requirement">;
					MinRanks rank6<name="Minimum Faith Requirement">;
					MinRanks rank7<name="Minimum Authority Requirement">;
					MinRanks rank8<name="Minimum Armor Requirement">;
					MinRanks rank9<name="Minimum Riding Requirement">;
					MinRanks rank10<name="Minimum Flying Requirement">;
				}genderlockid<name="Class Requirements",read=MyStructToString>;
		}requirements<name="Class Requirements">;
	}genderlock<bgcolor=cDkGreen,name="Certification Requirements">;
    
    FSeek(sectionpointers.TierLevelPointer);
	struct TierLevel
	{
		uint32 TierLevelMagic;
		uint32 numTierLevel;
		uint32 SizeOfTierLevel;
		struct TierLevelHeaderPadding{
			byte Padding[0x34];
		}tierlevelheaderpadding<name="Padding">;
        byte Zero;
        byte Beginner;
        byte Intermediate;
        byte Advanced;
        byte Master;
        byte Padding[3];
    }tierlevel<bgcolor=cDkRed,name="Tier Level Requirements">;


    FSeek(sectionpointers.ClassAbilityPointer);
	struct ClassAbility
	{
		uint32 ClassAbilityMagic;
		uint32 numClassAbility;
		uint32 SizeOfClassAbility;
		struct ClassAbilityHeaderPadding{
			byte Padding[0x34];
		}classabilityheaderpadding<name="Padding">;
		local int i;
        for( i = 0; i < numClassAbility; i++ )
		    struct AbilityBlock{
                local ClassName Class<hidden=true>;
				Class = i; // keeping a localvar so we can add classname to the struct indice
		        AbilityID MasteredAbility;
                byte UnknownValue;
                AbilityID ClassAbility1;
                AbilityID ClassAbility2;
                AbilityID ClassAbility3;

		}classblock<name="Ability Block",read=MyStructToStringA>;
	}classabilities<bgcolor=cDkBlue,name="Class Abilities">;
}file;


string MyStructToString(GenderLockID& value)
{
    return EnumToString(value.Class);
}

string MyStructToStringA(AbilityBlock& value)
{
    return EnumToString(value.Class);
}

string MyStructToStringC(ClassBlock& value)
{
    return EnumToString(value.Class);
}